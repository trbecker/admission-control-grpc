// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: admission.proto
#ifndef GRPC_admission_2eproto__INCLUDED
#define GRPC_admission_2eproto__INCLUDED

#include "admission.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace admission {

class Admission final {
 public:
  static constexpr char const* service_full_name() {
    return "admission.Admission";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Admission(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::admission::AdmissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admission::AdmissionResponse>> AsyncAdmission(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admission::AdmissionResponse>>(AsyncAdmissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admission::AdmissionResponse>> PrepareAsyncAdmission(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::admission::AdmissionResponse>>(PrepareAsyncAdmissionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Admission(::grpc::ClientContext* context, const ::admission::AdmissionRequest* request, ::admission::AdmissionResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::admission::AdmissionResponse>* AsyncAdmissionRaw(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::admission::AdmissionResponse>* PrepareAsyncAdmissionRaw(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Admission(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::admission::AdmissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admission::AdmissionResponse>> AsyncAdmission(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admission::AdmissionResponse>>(AsyncAdmissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admission::AdmissionResponse>> PrepareAsyncAdmission(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::admission::AdmissionResponse>>(PrepareAsyncAdmissionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Admission(::grpc::ClientContext* context, const ::admission::AdmissionRequest* request, ::admission::AdmissionResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::admission::AdmissionResponse>* AsyncAdmissionRaw(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::admission::AdmissionResponse>* PrepareAsyncAdmissionRaw(::grpc::ClientContext* context, const ::admission::AdmissionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Admission_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Admission(::grpc::ServerContext* context, const ::admission::AdmissionRequest* request, ::admission::AdmissionResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Admission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Admission() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Admission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Admission(::grpc::ServerContext* context, const ::admission::AdmissionRequest* request, ::admission::AdmissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdmission(::grpc::ServerContext* context, ::admission::AdmissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::admission::AdmissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Admission<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Admission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Admission() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Admission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Admission(::grpc::ServerContext* context, const ::admission::AdmissionRequest* request, ::admission::AdmissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Admission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Admission() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Admission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Admission(::grpc::ServerContext* context, const ::admission::AdmissionRequest* request, ::admission::AdmissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdmission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Admission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Admission() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::admission::AdmissionRequest, ::admission::AdmissionResponse>(std::bind(&WithStreamedUnaryMethod_Admission<BaseClass>::StreamedAdmission, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Admission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Admission(::grpc::ServerContext* context, const ::admission::AdmissionRequest* request, ::admission::AdmissionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdmission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::admission::AdmissionRequest,::admission::AdmissionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Admission<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Admission<Service > StreamedService;
};

}  // namespace admission


#endif  // GRPC_admission_2eproto__INCLUDED
