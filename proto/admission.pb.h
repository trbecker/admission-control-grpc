// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admission.proto

#ifndef PROTOBUF_INCLUDED_admission_2eproto
#define PROTOBUF_INCLUDED_admission_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_admission_2eproto 

namespace protobuf_admission_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_admission_2eproto
namespace admission {
class AdmissionRequest;
class AdmissionRequestDefaultTypeInternal;
extern AdmissionRequestDefaultTypeInternal _AdmissionRequest_default_instance_;
class AdmissionResponse;
class AdmissionResponseDefaultTypeInternal;
extern AdmissionResponseDefaultTypeInternal _AdmissionResponse_default_instance_;
}  // namespace admission
namespace google {
namespace protobuf {
template<> ::admission::AdmissionRequest* Arena::CreateMaybeMessage<::admission::AdmissionRequest>(Arena*);
template<> ::admission::AdmissionResponse* Arena::CreateMaybeMessage<::admission::AdmissionResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace admission {

// ===================================================================

class AdmissionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:admission.AdmissionRequest) */ {
 public:
  AdmissionRequest();
  virtual ~AdmissionRequest();

  AdmissionRequest(const AdmissionRequest& from);

  inline AdmissionRequest& operator=(const AdmissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdmissionRequest(AdmissionRequest&& from) noexcept
    : AdmissionRequest() {
    *this = ::std::move(from);
  }

  inline AdmissionRequest& operator=(AdmissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdmissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdmissionRequest* internal_default_instance() {
    return reinterpret_cast<const AdmissionRequest*>(
               &_AdmissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AdmissionRequest* other);
  friend void swap(AdmissionRequest& a, AdmissionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdmissionRequest* New() const final {
    return CreateMaybeMessage<AdmissionRequest>(NULL);
  }

  AdmissionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdmissionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdmissionRequest& from);
  void MergeFrom(const AdmissionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdmissionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string iMSI = 1;
  void clear_imsi();
  static const int kIMSIFieldNumber = 1;
  const ::std::string& imsi() const;
  void set_imsi(const ::std::string& value);
  #if LANG_CXX11
  void set_imsi(::std::string&& value);
  #endif
  void set_imsi(const char* value);
  void set_imsi(const char* value, size_t size);
  ::std::string* mutable_imsi();
  ::std::string* release_imsi();
  void set_allocated_imsi(::std::string* imsi);

  // string gnb = 2;
  void clear_gnb();
  static const int kGnbFieldNumber = 2;
  const ::std::string& gnb() const;
  void set_gnb(const ::std::string& value);
  #if LANG_CXX11
  void set_gnb(::std::string&& value);
  #endif
  void set_gnb(const char* value);
  void set_gnb(const char* value, size_t size);
  ::std::string* mutable_gnb();
  ::std::string* release_gnb();
  void set_allocated_gnb(::std::string* gnb);

  // @@protoc_insertion_point(class_scope:admission.AdmissionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imsi_;
  ::google::protobuf::internal::ArenaStringPtr gnb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_admission_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdmissionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:admission.AdmissionResponse) */ {
 public:
  AdmissionResponse();
  virtual ~AdmissionResponse();

  AdmissionResponse(const AdmissionResponse& from);

  inline AdmissionResponse& operator=(const AdmissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdmissionResponse(AdmissionResponse&& from) noexcept
    : AdmissionResponse() {
    *this = ::std::move(from);
  }

  inline AdmissionResponse& operator=(AdmissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdmissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdmissionResponse* internal_default_instance() {
    return reinterpret_cast<const AdmissionResponse*>(
               &_AdmissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AdmissionResponse* other);
  friend void swap(AdmissionResponse& a, AdmissionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdmissionResponse* New() const final {
    return CreateMaybeMessage<AdmissionResponse>(NULL);
  }

  AdmissionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdmissionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdmissionResponse& from);
  void MergeFrom(const AdmissionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdmissionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool accept = 1;
  void clear_accept();
  static const int kAcceptFieldNumber = 1;
  bool accept() const;
  void set_accept(bool value);

  // @@protoc_insertion_point(class_scope:admission.AdmissionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool accept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_admission_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdmissionRequest

// string iMSI = 1;
inline void AdmissionRequest::clear_imsi() {
  imsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdmissionRequest::imsi() const {
  // @@protoc_insertion_point(field_get:admission.AdmissionRequest.iMSI)
  return imsi_.GetNoArena();
}
inline void AdmissionRequest::set_imsi(const ::std::string& value) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:admission.AdmissionRequest.iMSI)
}
#if LANG_CXX11
inline void AdmissionRequest::set_imsi(::std::string&& value) {
  
  imsi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:admission.AdmissionRequest.iMSI)
}
#endif
inline void AdmissionRequest::set_imsi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:admission.AdmissionRequest.iMSI)
}
inline void AdmissionRequest::set_imsi(const char* value, size_t size) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:admission.AdmissionRequest.iMSI)
}
inline ::std::string* AdmissionRequest::mutable_imsi() {
  
  // @@protoc_insertion_point(field_mutable:admission.AdmissionRequest.iMSI)
  return imsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdmissionRequest::release_imsi() {
  // @@protoc_insertion_point(field_release:admission.AdmissionRequest.iMSI)
  
  return imsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdmissionRequest::set_allocated_imsi(::std::string* imsi) {
  if (imsi != NULL) {
    
  } else {
    
  }
  imsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imsi);
  // @@protoc_insertion_point(field_set_allocated:admission.AdmissionRequest.iMSI)
}

// string gnb = 2;
inline void AdmissionRequest::clear_gnb() {
  gnb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdmissionRequest::gnb() const {
  // @@protoc_insertion_point(field_get:admission.AdmissionRequest.gnb)
  return gnb_.GetNoArena();
}
inline void AdmissionRequest::set_gnb(const ::std::string& value) {
  
  gnb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:admission.AdmissionRequest.gnb)
}
#if LANG_CXX11
inline void AdmissionRequest::set_gnb(::std::string&& value) {
  
  gnb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:admission.AdmissionRequest.gnb)
}
#endif
inline void AdmissionRequest::set_gnb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gnb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:admission.AdmissionRequest.gnb)
}
inline void AdmissionRequest::set_gnb(const char* value, size_t size) {
  
  gnb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:admission.AdmissionRequest.gnb)
}
inline ::std::string* AdmissionRequest::mutable_gnb() {
  
  // @@protoc_insertion_point(field_mutable:admission.AdmissionRequest.gnb)
  return gnb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdmissionRequest::release_gnb() {
  // @@protoc_insertion_point(field_release:admission.AdmissionRequest.gnb)
  
  return gnb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdmissionRequest::set_allocated_gnb(::std::string* gnb) {
  if (gnb != NULL) {
    
  } else {
    
  }
  gnb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gnb);
  // @@protoc_insertion_point(field_set_allocated:admission.AdmissionRequest.gnb)
}

// -------------------------------------------------------------------

// AdmissionResponse

// bool accept = 1;
inline void AdmissionResponse::clear_accept() {
  accept_ = false;
}
inline bool AdmissionResponse::accept() const {
  // @@protoc_insertion_point(field_get:admission.AdmissionResponse.accept)
  return accept_;
}
inline void AdmissionResponse::set_accept(bool value) {
  
  accept_ = value;
  // @@protoc_insertion_point(field_set:admission.AdmissionResponse.accept)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admission

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_admission_2eproto
